name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT
        
    - name: Update installer with correct repo info
      run: |
        # Nahradí YOUR_USERNAME skutečným GitHub username
        sed -i 's/YOUR_USERNAME/${{ github.repository_owner }}/g' install.py
        sed -i 's/YOUR_USERNAME/${{ github.repository_owner }}/g' README.md
        sed -i 's/YOUR_USERNAME/${{ github.repository_owner }}/g' src/config.py || true
        
    - name: Create release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## 🎬 OneClick Subtitle Generator ${{ steps.get_version.outputs.VERSION }}
        
        ### 🚀 Jednokliková instalace
        
        **Univerzální installer (všechny platformy):**
        ```bash
        curl -L https://github.com/${{ github.repository }}/releases/latest/download/install.py -o install.py
        python install.py
        ```
        
        **Platform-specifické instalátory:**
        
        #### 🪟 Windows
        ```powershell
        irm https://github.com/${{ github.repository }}/releases/latest/download/install_windows.ps1 | iex
        ```
        
        #### 🍎 macOS
        ```bash
        curl -fsSL https://github.com/${{ github.repository }}/releases/latest/download/install_macos.sh | bash
        ```
        
        #### 🐧 Linux
        ```bash
        curl -fsSL https://github.com/${{ github.repository }}/releases/latest/download/install_linux.sh | bash
        ```
        
        ### 🎯 Co je nového
        
        - ✅ Automatické batch zpracování všech audio souborů ve složce
        - ✅ Titulky do 8 světových jazyků (cs, en, es, zh, ru, de, fr, id)
        - ✅ Cross-platform podpora (Windows, macOS, Linux)
        - ✅ Optimalizováno pro Apple Silicon (M1/M2/M3)
        - ✅ GUI i CLI rozhraní
        - ✅ Produkčně připravené SRT titulky
        
        ### 📊 Výkon
        
        | Hardware | 10min audio | 1h audio |
        |----------|-------------|----------|
        | Apple M2 | ~2-3 min/jazyk | ~15-20 min/jazyk |
        | Intel i7 | ~4-5 min/jazyk | ~25-30 min/jazyk |
        | NVIDIA RTX | ~1-2 min/jazyk | ~8-12 min/jazyk |
        
        ### 🔧 Systémové požadavky
        
        - **Python 3.8+**
        - **4GB RAM** (doporučeno 8GB+)
        - **Internetové připojení** (pro stažení modelů a překlad)
        
        ### 📱 Podporované formáty
        
        **Vstup:** `.wav`, `.mp3`, `.m4a`, `.flac`, `.ogg`, `.wma`  
        **Výstup:** `.srt` titulky kompatibilní se všemi video editory
        
        ### 🆘 Podpora
        
        - 📚 **Dokumentace:** [README.md](https://github.com/${{ github.repository }})
        - 🐛 **Bug reports:** [Issues](https://github.com/${{ github.repository }}/issues)
        - 💬 **Diskuze:** [Discussions](https://github.com/${{ github.repository }}/discussions)
        
        ---
        
        **Vytvořeno s ❤️ pro produkční použití v AI startup prostředí**
        EOF
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: OneClick Subtitle Generator ${{ steps.get_version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        
    - name: Upload Universal Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./install.py
        asset_name: install.py
        asset_content_type: text/x-python
        
    - name: Upload Main GUI Application
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./src/oneclick_subtitle_generator.py
        asset_name: oneclick_subtitle_generator.py
        asset_content_type: text/x-python
        
    - name: Upload CLI Application
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./src/enhanced_translator.py
        asset_name: enhanced_translator.py
        asset_content_type: text/x-python
        
    - name: Upload Configuration
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./src/config.py
        asset_name: config.py
        asset_content_type: text/x-python
        
    - name: Upload Utils
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./src/utils.py
        asset_name: utils.py
        asset_content_type: text/x-python
        
    - name: Upload Windows PowerShell Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./installers/install_windows.ps1
        asset_name: install_windows.ps1
        asset_content_type: text/plain
        
    - name: Upload Windows Batch Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./installers/install_windows.bat
        asset_name: install_windows.bat
        asset_content_type: text/plain
        
    - name: Upload macOS Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./installers/install_macos.sh
        asset_name: install_macos.sh
        asset_content_type: text/x-shellscript
        
    - name: Upload Linux Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./installers/install_linux.sh
        asset_name: install_linux.sh
        asset_content_type: text/x-shellscript

  test-installation:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Test Universal Installer
      shell: python
      run: |
        import urllib.request
        import subprocess
        import sys
        import os
        
        # Stažení installeru
        try:
            urllib.request.urlretrieve(
                'https://github.com/${{ github.repository }}/releases/latest/download/install.py',
                'install.py'
            )
            print("✅ Installer downloaded successfully")
        except Exception as e:
            print(f"❌ Failed to download installer: {e}")
            sys.exit(1)
        
        # Test basic import
        test_code = '''
            import sys
            import platform
            print(f"Python: {sys.version}")
            print(f"Platform: {platform.system()} {platform.machine()}")
            print("✅ Basic test passed")
        '''
        
        with open('test_install.py', 'w') as f:
            f.write(test_code)
        
        # Run test
        result = subprocess.run([sys.executable, 'test_install.py'], capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print(result.stderr)
        
        sys.exit(result.returncode)
        
    - name: Report test results
      if: always()
      run: |
        echo "🧪 Test results for ${{ matrix.os }} Python ${{ matrix.python-version }}"
        echo "Status: ${{ job.status }}"

  notify-completion:
    needs: [create-release, test-installation]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Release completion notification
      run: |
        echo "🎉 Release completed!"
        echo "📦 Available at: https://github.com/${{ github.repository }}/releases/latest"
        echo "🚀 Users can now install with:"
        echo "   curl -L https://github.com/${{ github.repository }}/releases/latest/download/install.py -o install.py"
        echo "   python install.py"
